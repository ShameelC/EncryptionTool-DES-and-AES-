import tkinter as tk
from tkinter import messagebox
import base64
import os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes, padding
from cryptography.hazmat.backends import default_backend

# Encryption and Decryption functions
def derive_key(password: str, salt: bytes, key_length: int) -> bytes:
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=key_length,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    return kdf.derive(password.encode())

def encrypt(plaintext: str, password: str, algorithm: str) -> str:
    salt = os.urandom(16)
    iv = os.urandom(8 if algorithm == 'DES' else 16)
    key_length = 8 if algorithm == 'DES' else 32
    key = derive_key(password, salt, key_length)
    
    if algorithm == 'DES':
        cipher = Cipher(algorithms.TripleDES(key), modes.CBC(iv), backend=default_backend())
    else:  # AES
        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    
    encryptor = cipher.encryptor()
    padder = padding.PKCS7(algorithms.TripleDES.block_size if algorithm == 'DES' else 128).padder()
    padded_data = padder.update(plaintext.encode()) + padder.finalize()
    ciphertext = encryptor.update(padded_data) + encryptor.finalize()
    
    encrypted_message = base64.b64encode(salt + iv + ciphertext).decode()
    return encrypted_message

def decrypt(ciphertext: str, password: str, algorithm: str) -> str:
    encrypted_data = base64.b64decode(ciphertext)
    
    salt = encrypted_data[:16]
    iv = encrypted_data[16:(24 if algorithm == 'DES' else 32)]
    encrypted_message = encrypted_data[(24 if algorithm == 'DES' else 32):]
    key_length = 8 if algorithm == 'DES' else 32
    key = derive_key(password, salt, key_length)
    
    if algorithm == 'DES':
        cipher = Cipher(algorithms.TripleDES(key), modes.CBC(iv), backend=default_backend())
    else:  # AES
        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    
    decryptor = cipher.decryptor()
    decrypted_padded_data = decryptor.update(encrypted_message) + decryptor.finalize()
    
    unpadder = padding.PKCS7(algorithms.TripleDES.block_size if algorithm == 'DES' else 128).unpadder()
    decrypted_data = unpadder.update(decrypted_padded_data) + unpadder.finalize()
    
    return decrypted_data.decode()

# GUI Application
def encrypt_text():
    plaintext = input_text.get("1.0", tk.END).strip()
    password = password_entry.get().strip()
    algorithm = algorithm_var.get()
    if plaintext and password:
        try:
            encrypted = encrypt(plaintext, password, algorithm)
            output_text.delete("1.0", tk.END)
            output_text.insert(tk.END, encrypted)
        except Exception as e:
            messagebox.showerror("Error", "Encryption failed. Please try again.")
    else:
        messagebox.showwarning("Warning", "Please enter both text and password.")

def decrypt_text():
    ciphertext = input_text.get("1.0", tk.END).strip()
    password = password_entry.get().strip()
    algorithm = algorithm_var.get()
    if ciphertext and password:
        try:
            decrypted = decrypt(ciphertext, password, algorithm)
            output_text.delete("1.0", tk.END)
            output_text.insert(tk.END, decrypted)
        except Exception as e:
            messagebox.showerror("Error", "Decryption failed. Please check your password, input, and selected algorithm.")
    else:
        messagebox.showwarning("Warning", "Please enter both text and password.")

# Setting up the main window
root = tk.Tk()
root.title("Encryption/Decryption Tool")

# Algorithm Selection
algorithm_var = tk.StringVar(value="AES")
algorithm_label = tk.Label(root, text="Select Algorithm:")
algorithm_label.grid(row=0, column=0, padx=10, pady=10)
algorithm_dropdown = tk.OptionMenu(root, algorithm_var, "AES", "DES")
algorithm_dropdown.grid(row=0, column=1, padx=10, pady=10)

# Input Text
input_label = tk.Label(root, text="Input Text:")
input_label.grid(row=1, column=0, padx=10, pady=10)
input_text = tk.Text(root, height=5, width=40)
input_text.grid(row=1, column=1, padx=10, pady=10)

# Password Entry
password_label = tk.Label(root, text="Password:")
password_label.grid(row=2, column=0, padx=10, pady=10)
password_entry = tk.Entry(root, show="*")
password_entry.grid(row=2, column=1, padx=10, pady=10)

# Output Text
output_label = tk.Label(root, text="Output:")
output_label.grid(row=3, column=0, padx=10, pady=10)
output_text = tk.Text(root, height=5, width=40)
output_text.grid(row=3, column=1, padx=10, pady=10)

# Buttons
encrypt_button = tk.Button(root, text="Encrypt", command=encrypt_text)
encrypt_button.grid(row=4, column=0, padx=10, pady=10)
decrypt_button = tk.Button(root, text="Decrypt", command=decrypt_text)
decrypt_button.grid(row=4, column=1, padx=10, pady=10)

# Start the application
root.mainloop()
